Backend (Spring Boot + JPA)
Frontent - (POSTMAN)
-------------------------------

Definição da Estratégia de Acesso ao Banco de Dados

Para o projeto, a estratégia de acesso ao banco de dados implementada foi o  uso do Spring Data JPA junto com o PostgreSQL. A abordagem é baseada no seguinte:

Spring Data JPA: Um framework que abstrai a complexidade do acesso ao banco de dados usando a API Java Persistence (JPA). Ele facilita a criação de repositórios para manipulação de entidades e o mapeamento objeto-relacional (ORM).

PostgreSQL: O banco de dados escolhido para persistir os dados, utilizando a linguagem SQL. É um sistema de gerenciamento de banco de dados relacional altamente escalável e confiável.

2. Ferramentas e Tecnologias Utilizadas pelo grupo

As principais ferramentas e tecnologias envolvidas na implementação do acesso ao banco de dados são:

JPA (Java Persistence API): Usada para mapeamento objeto-relacional (ORM), convertendo objetos Java em registros do banco de dados.

Hibernate: Implementação de JPA, que facilita o gerenciamento de transações e o mapeamento objeto-relacional.

Spring Data JPA: Simplifica o uso do JPA com repositórios, eliminando a necessidade de escrever consultas SQL complexas.

PostgreSQL: O banco de dados relacional onde as entidades persistem os dados.

---------------------------------------------------

E ao final, para visualizar tudo funcionando corretamente e, atendendo ao que foi pedido pelo professor(frontend) foi utilizado o postman para realizar, GET, PUT, DELET, POST
----------------------------------------------------
Para a criação do frontend(visual do projeto)
Utilizamos as seguintes linguagens:

HTML: Estrutura da página e organização dos elementos.
CSS e Bootstrap: Estilo visual e design responsivo.
JavaScript: Chamadas para o back-end (usando APIs REST) e atualização dinâmica da interface.
Com essa combinação, HTML, CSS e Bootstrap, buscamos criar uma aparência e a estrutura visual da aplicação simples e prática, enquanto o JavaScript foi o responsável pelas funcionalidades dinâmicas
e pela comunicação com o back-end, criando uma experiência interativa e eficiente para o usuário.

Para que a comunicação entre o front e o backend da nossa pagina ocorra de forma eficiente e sem erros, foi preciso habilitar o CORS, no servidor Spring Boot, portanto, uma pasta chamada CONFIG foi criada, com o arquivo 
CorsConfig, permitindo assim, desviar do problema que estava sendo enfrentando. O problema relacionado à política de CORS (Cross-Origin Resource Sharing). Política impede que o navegador faça requisições a um servidor
que não está explicitamente permitido, especialmente em situações onde o servidor e o cliente não estão na mesma origem (ou seja, protocolo, domínio e porta diferentes).

Além disso, foi adicionado nos nossos controllers a Anotação @CrossOrigin. Para permitir requisições de diferentes origens.